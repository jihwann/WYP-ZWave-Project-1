<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZWaveLib</name>
    </assembly>
    <members>
        <member name="T:ZWaveLib.CommandClasses.Irrigation.Irrigation">
            <summary>
            SDS13740-1 Z-Wave Plus Device and Command Class Types and Defines Specification 2016-08-26
            Sigma Designs Inc.Types and Defines Page 126 of 460
            </summary>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.SystemInfoGet(ZWaveLib.ZWaveNode)">
            <summary>
            This command is used to request a receiving node about its irrigation system information.
            </summary>
            <param name="node"></param>
            <returns></returns>
            <remarks>SDS13781-2 4.42.4 Irrigation System Info Get Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.SystemStatusGet(ZWaveLib.ZWaveNode)">
            <summary>
            This command is used to request a receiving node about its irrigation system status.
            </summary>
            <param name="node"></param>
            <returns></returns>
            <remarks>SDS13781-2 4.42.6 Irrigation System Status Get Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.SystemConfigSet(ZWaveLib.ZWaveNode,ZWaveLib.CommandClasses.Irrigation.IrrigationSystemConfig)">
            <summary>
            This command allows the irrigation system to be configured accordingly.
            </summary>
            <param name="node"></param>
            <param name="config"></param>
            <returns>SDS13781 4.42.8 Irrigation System Config Set Command</returns>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.SystemConfigGet(ZWaveLib.ZWaveNode)">
            <summary>
            This command is used to request a receiving node about its current irrigation system configuration.
            </summary>
            <param name="node"></param>
            <returns></returns>
            <remarks>SDS13781 4.42.9 Irrigation System Config Get Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveInfoGet(ZWaveLib.ZWaveNode,System.Byte,System.Boolean)">
            <summary>
            This command is used to request general information about the specified valve.
            </summary>
            <param name="node"></param>
            <param name="valveId">This field is used to indicate the Valve ID if the sending node requests the information about a zone valve.</param>
            <param name="useMasterValve">This field is used to indicate whether the sending node requests the information of the master valve or of a zone valve.</param>
            <returns></returns>
            <remarks>SDS13781 4.42.11 Irrigation Valve Info Get Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveConfigSet(ZWaveLib.ZWaveNode,ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig)">
            <summary>
            This command allows an irrigation valve to be configured accordingly.
            </summary>
            <param name="node"></param>
            <param name="config"></param>
            <returns></returns>
            <remarks>SDS13781 4.42.13 Irrigation Valve Config Set Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveConfigGet(ZWaveLib.ZWaveNode,System.Byte,System.Boolean)">
            <summary>
            This command is used to request the current configuration of an irrigation valve.
            </summary>
            <param name="node"></param>
            <param name="valveId"></param>
            <param name="useMasterValve"></param>
            <returns></returns>
            <remarks>SDS13781 4.42.14 Irrigation Valve Config Get Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveRun(ZWaveLib.ZWaveNode,System.Byte,System.Boolean,System.UInt16)">
            <summary>
            The Irrigation Valve Run Command will run the specified valve for a specified duration.
            </summary>
            <param name="node"></param>
            <param name="valveId">This field is used to specify the actual Valve ID.</param>
            <param name="useMasterValve">This field is used to indicate if the specified valve is the master valve or a zone valve.</param>
            <param name="duration">This field is used to specify the duration of the run in seconds.</param>
            <returns></returns>
            <remarks>SDS13781 4.42.16 Irrigation Valve Run Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveTableSet(ZWaveLib.ZWaveNode,ZWaveLib.CommandClasses.Irrigation.IrrigationValveTable)">
            <summary>
            This command is used to set a valve table with a list of valves and durations.
            </summary>
            <param name="node"></param>
            <param name="valveTable"></param>
            <returns></returns>
            <remarks>SDS13781 4.42.17 Irrigation Valve Table Set Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveTableGet(ZWaveLib.ZWaveNode,System.Byte)">
            <summary>
            This command is used to request the contents of the specified Valve Table ID.
            </summary>
            <param name="node"></param>
            <param name="valveTableId">
            This field is used to specify the valve table ID.
            Valves tables MUST be identified sequentially from 1 to the total number available on the device.
            </param>
            <returns></returns>
            <remarks>SDS13781 4.42.17 Irrigation Valve Table Set Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.ValveTableRun(ZWaveLib.ZWaveNode,System.Byte[])">
            <summary>
            This command is used to run the specified valve tables sequentially.
            </summary>
            <param name="node"></param>
            <param name="valveTableIds">List of Valve Tables to run sequentially.</param>
            <returns></returns>
            <remarks>SDS13781 4.42.20 Irrigation Valve Table Run Command</remarks>
        </member>
        <member name="M:ZWaveLib.CommandClasses.Irrigation.Irrigation.SystemShutoff(ZWaveLib.ZWaveNode,System.Byte)">
            <summary>
            This command is used to prevent any irrigation activity triggered by the Schedule CC for a specified duration.
            </summary>
            <param name="node"></param>
            <param name="duration">
            Duration of the system shutoff.
            Values in the range 1..254 indicate how many hours the irrigation system must stay shut off after reception of this command.
            The value 0 indicates to turn off any running valve (including the master valve) as well as cancel any active Irrigation Valve Table Run or Schedule.
            The value 255 indicates that the irrigation system MUST stay permanently shut off until the node receives special commands.
            </param>
            <returns></returns>
            <remarks>SDS13781 4.42.21 Irrigation System Shutoff Command</remarks>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSensorPolarityMask.RainSensorPolarity">
            <summary>
            Rain Sensor Polarity (0 LOW, 1 HIGH)
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSensorPolarityMask.MoistureSensorPolarity">
            <summary>
            Moisture Sensor Polarity (0 LOW, 1 HIGH)
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSensorPolarityMask.Valid">
            <summary>
            This bit MUST be set to 1 to indicate that the other bits in the bitmask contain valid data.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemConfig.MasterValveDelay">
            <summary>
            This field is used to configure a delay in seconds between turning on the master valve and turning on any �zone� valve.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemConfig.PressureHighThreshold">
            <summary>
            These field is used to configure the pressure high threshold at the receiving node in kPa.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemConfig.PressureLowThreshold">
            <summary>
            These field is used to configure the pressure low threshold at the receiving node in kPa.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemConfig.SensorPolarity">
            <summary>
            This field is used to configure optional sensors� polarity at the receiving node.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemInfoReport.IsMasterValueSupported">
            <summary>
            Indicate if a master valve is supported by the device.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemInfoReport.TotalNumberOfValves">
            <summary>
            Total number of zone valves supported by the device.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemInfoReport.TotalNumberOfValveTables">
            <summary>
            Total number of valve tables that can be created/stored in the device.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemInfoReport.ValveTableMaxSize">
            <summary>
            Maximum number of entries per valve table supported by the device.
            Must be in range 1..15.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemSensorStatusMask.FlowSensorActive">
            <summary>
            Flow Sensor currently active
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemSensorStatusMask.PressureSensorActive">
            <summary>
            Pressure Sensor currently active
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemSensorStatusMask.RainSensorActive">
            <summary>
            Rain Sensor attached and active
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemSensorStatusMask.MoistureSensorActive">
            <summary>
            Moisture Sensor attached and active
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.SystemVoltage">
            <summary>
            The voltage level applied at the device.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.SensorStatus">
            <summary>
            This field is used to advertise if optional sensors are currently reporting values or detecting events at the device.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.Flow">
            <summary>
            The Flow value measured by the flow sensor.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.Pressure">
            <summary>
            The Pressure value measured by the pressure sensor.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.ShutoffDuration">
            <summary>
            Indicates how many hours are left in the �shut off� mode.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.SystemErrorStatus">
            <summary>
            This field is used to advertise if any system error is being active at the sending node.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.IsMasterValveOpen">
            <summary>
            This field is used to indicate if a master valve is currently open or closed.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemStatusReport.ValveId">
            <summary>
            This field is used to indicate the Valve ID of the first open zone valve currently On / Open.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.UseMasterValve">
            <summary>
            This field is used to indicate whether the valve to configure is the master valve or a zone valve.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.ValveId">
            <summary>
            This field is used to indicate the Valve ID to configure.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.NominalCurrentHighThreshold">
            <summary>
            This field is used to configure the nominal current high threshold for the actual valve.
            This field MUST be expressed as a multiple of 10mA.
            </summary>
            <example>The value 23 represents 230 mA.</example>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.NominalCurrentLowThreshold">
            <summary>
            This field is used to configure the nominal current low threshold for the actual valve at the receiving node.
            This field MUST be expressed as a multiple of 10mA.
            </summary>
            <example>The value 23 represents 230 mA.</example>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.MaximumFlow">
            <summary>
            This field is used to configure the maximum allowed water flow for the specified valve.
            This field MUST be expressed in l/h (liter/hour).
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.FlowHighThreshold">
            <summary>
            This field is used to configure the flow high threshold for the specified valve.
            This field MUST be expressed in l/h (liter/hour).
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.FlowLowThreshold">
            <summary>
            This field is used to configure the flow low threshold for the specified valve.
            This field MUST be expressed in l/h (liter/hour).
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.UseRainSensor">
            <summary>
            Use Rain Sensor.
            The valve MUST turn off / close if rain is detected.
            A receiving node having no support for rain sensor MAY ignore this field.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveConfig.UseMoistureSensor">
            <summary>
            Use Moisture Sensor.
            The valve MUST turn off / close if moisture is detected.
            A receiving node having no support for moisture sensor MAY ignore this field.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.ShortCircuit">
            <summary>
            Short circuit has been detected.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.CurrentTooHigh">
            <summary>
            Current high threshold has been detected.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.CurrentTooLow">
            <summary>
            Current low threshold has been detected.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.MaximumFlow">
            <summary>
            Maximum flow has been detected.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.FlowTooHigh">
            <summary>
            Flow high threshold has been detected.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationValveErrorStatusMask.FlowTooLow">
            <summary>
            Flow low threshold has been detected.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveInfo.IsMasterValve">
            <summary>
            This field is used to indicate whether the sending node advertises the information of the master valve or of a zone valve.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveInfo.IsConnected">
            <summary>
            This field indicates if the actual valve is currently connected to the node or not.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveInfo.ValveId">
            <summary>
            This field is used to indicate the Valve ID if the sending node requests the information about a zone valve.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveInfo.NominalCurrent">
            <summary>
            Valve�s nominal electric current when the valve is On / Open.
            This field MUST be expressed as a multiple of 10mA.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveInfo.ErrorStatus">
            <summary>
            This bit mask provides valve error status fields.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveTable.TableId">
            <summary>
            This field is used to specify the valve table ID.
            </summary>
            <remarks>This field MUST be set to a Valve Table ID supported by the receiving node.</remarks>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveTable.Items">
            <summary>
            These fields are used to specify valve IDs and their associated run duration.
            </summary>
        </member>
        <member name="P:ZWaveLib.CommandClasses.Irrigation.IrrigationValveTableItem.Duration">
            <summary>
            The duration in seconds.
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemErrorMask.NotProgrammed">
            <summary>
            The device has not been programmed
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemErrorMask.EmergencyShutdows">
            <summary>
            The device has experienced an emergency shutdown
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemErrorMask.PressureTooHigh">
            <summary>
            The device�s pressure high threshold has been triggered
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemErrorMask.PressureTooLow">
            <summary>
            The device�s pressure low threshold has been triggered
            </summary>
        </member>
        <member name="F:ZWaveLib.CommandClasses.Irrigation.IrrigationSystemErrorMask.ValveError">
            <summary>
            A valve or the master valve is reporting error
            </summary>
        </member>
        <member name="T:ZWaveLib.CommandClasses.ZWaveSensorBinaryParameter">
            <summary>
            Enumerator for possible sensor binary parameters (only reported for v2)
            </summary>
        </member>
        <member name="M:ZWaveLib.ICommandClass.GetClassId">
            <summary>
            Returns Id of Command class
            </summary>
            <returns>command class Id</returns>
        </member>
        <member name="M:ZWaveLib.ICommandClass.GetEvent(ZWaveLib.ZWaveNode,System.Byte[])">
            <summary>Processes the message and returns corresponding ZWaveEvent</summary>
            <param name="node">the Node triggered the command</param>
            <param name="message">command part of ZWave message (without headers and checksum)</param>
            <returns></returns>
        </member>
        <member name="T:ZWaveLib.Values.ZWaveAlarmEvent">
            <summary>
            Enumerator for alarm value details. e.g., 0x16 corresponds with the action of 
            an open door if the alarm AccessControl alarm type is set.
            </summary>
            
        </member>
        <member name="M:ZWaveLib.Values.ZWaveValue.GetPrecisionScaleSize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents given precision, scale and size as one byte value
            </summary>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZWaveLib.Values.ZWaveValue.GetValueBytes(System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get bytes representation of Z-Wave Value used in multilevel sensors.
            </summary>
            <param name="value"></param>
            <param name="precision"></param>
            <param name="scale"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:ZWaveLib.Values.ZWaveValue.GetValueBytes(System.Double,System.Byte)">
            <summary>
            Get bytes representation of Z-Wave Value used in multilevel sensors.
            Tries to guess the size and precision based on passed value.
            </summary>
            <param name="value"></param>
            <param name="scale"></param>
            <returns>PrecisionScaleSize byte and value bytes</returns>
        </member>
        <member name="T:ZWaveLib.ZWaveMessage">
            <summary>
            Z-Wave message.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Ack">
            <summary>
            Ack message.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Nack">
            <summary>
            Nack message.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.ResendAttemptsMax">
            <summary>
            Max resend attempts.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.SendMessageTimeoutMs">
            <summary>
            The send message timeout in milliseconds.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Header">
            <summary>
            The Z-Wave message frame header.
            </summary>
        </member>
        <member name="P:ZWaveLib.ZWaveMessage.NodeId">
            <summary>
            Gets or sets the identifier of the node subject of this message.
            </summary>
            <value>The node identifier.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveMessage.CallbackId">
            <summary>
            Gets or sets the callback identifier.
            </summary>
            <value>The callback identifier.</value>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.RawData">
            <summary>
            The raw message bytes data.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Seq">
            <summary>
            The sequence number of this message.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Timestamp">
            <summary>
            The timestamp.
            </summary>
        </member>
        <member name="P:ZWaveLib.ZWaveMessage.ResendCount">
            <summary>
            Gets or sets the resend counter.
            </summary>
            <value>The resend counter.</value>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Direction">
            <summary>
            The message direction (Inboud/Outbound).
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Type">
            <summary>
            The type of message (Request/Response).
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.Function">
            <summary>
            The function.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.CommandClass">
            <summary>
            The command class.
            </summary>
        </member>
        <member name="F:ZWaveLib.ZWaveMessage.CallbackStatus">
            <summary>
            The callback status.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.#ctor(System.Byte[],ZWaveLib.MessageDirection,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveMessage"/> class.
            </summary>
            <param name="message">Message.</param>
            <param name="direction">Direction.</param>
            <param name="generateCallback">If set to <c>true</c> generate callback.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.Wait">
            <summary>
            Wait until this message transaction is completed.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.BuildSendDataRequest(System.Byte,System.Byte[])">
            <summary>
            Builds a Z-Wave SendData request message.
            </summary>
            <returns>The send data request.</returns>
            <param name="nodeId">Node identifier.</param>
            <param name="request">Request.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.VerifyChecksum(System.Byte[])">
            <summary>
            Verifies the checksum.
            </summary>
            <returns><c>true</c>, if checksum was verifyed, <c>false</c> otherwise.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.GenerateCallbackId">
            <summary>
            Generates the callback identifier for an Outbound message.
            </summary>
            <returns>The callback identifier.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveMessage.GenerateChecksum(System.Byte[])">
            <summary>
            Generates the checksum of an Outbound message.
            </summary>
            <returns>The checksum.</returns>
            <param name="data">Data.</param>
        </member>
        <member name="T:ZWaveLib.NodeCapabilities">
            <summary>
            Node capabilities (Protocol Info).
            </summary>
        </member>
        <member name="P:ZWaveLib.NodeCapabilities.BasicType">
            <summary>
            Gets or sets the basic type.
            </summary>
            <value>The basic type.</value>
        </member>
        <member name="P:ZWaveLib.NodeCapabilities.GenericType">
            <summary>
            Gets or sets the generic type.
            </summary>
            <value>The generic type.</value>
        </member>
        <member name="P:ZWaveLib.NodeCapabilities.SpecificType">
            <summary>
            Gets or sets the specific type.
            </summary>
            <value>The specific type.</value>
        </member>
        <member name="M:ZWaveLib.NodeCapabilities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCapabilities"/> class.
            </summary>
        </member>
        <member name="T:ZWaveLib.NodeVersion">
            <summary>
            Node software version.
            </summary>
        </member>
        <member name="P:ZWaveLib.NodeVersion.LibraryType">
            <summary>
            Gets or sets the Z-Wave Library Type.
            </summary>
            <value>Z-Wave Library Type.</value>
        </member>
        <member name="P:ZWaveLib.NodeVersion.ProtocolVersion">
            <summary>
            Gets or sets the Z-Wave Protocol Version.
            </summary>
            <value>Z-Wave Protocol Version.</value>
        </member>
        <member name="P:ZWaveLib.NodeVersion.ProtocolSubVersion">
            <summary>
            Gets or sets the Z-Wave Protocol Sub Version.
            </summary>
            <value>Z-Wave Protocol Sub Version.</value>
        </member>
        <member name="P:ZWaveLib.NodeVersion.ApplicationVersion">
            <summary>
            Gets or sets the Application Version.
            </summary>
            <value>Application Version.</value>
        </member>
        <member name="P:ZWaveLib.NodeVersion.ApplicationSubVersion">
            <summary>
            Gets or sets the Application Sub Version.
            </summary>
            <value>Application Sub Version.</value>
        </member>
        <member name="M:ZWaveLib.NodeVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeVersion"/> class.
            </summary>
        </member>
        <member name="T:ZWaveLib.NodeCommandClass">
            <summary>
            Node command class.
            </summary>
        </member>
        <member name="F:ZWaveLib.NodeCommandClass.Id">
            <summary>
            The CC identifier.
            </summary>
        </member>
        <member name="P:ZWaveLib.NodeCommandClass.Version">
            <summary>
            Gets or sets the version for this CC.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:ZWaveLib.NodeCommandClass.CommandClass">
            <summary>
            Gets the command class enumeration entry.
            </summary>
            <value>The command class.</value>
        </member>
        <member name="M:ZWaveLib.NodeCommandClass.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCommandClass"/> class.
            </summary>
        </member>
        <member name="M:ZWaveLib.NodeCommandClass.#ctor(System.Byte,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeCommandClass"/> class.
            </summary>
            <param name="id">Identifier.</param>
            <param name="version">Version.</param>
        </member>
        <member name="T:ZWaveLib.NodeData">
            <summary>
            Custom node data.
            </summary>
        </member>
        <member name="P:ZWaveLib.NodeData.Name">
            <summary>
            Gets or sets the name for this data entry.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:ZWaveLib.NodeData.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:ZWaveLib.NodeData.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.NodeData"/> class.
            </summary>
            <param name="fieldName">Field name.</param>
            <param name="data">Data.</param>
        </member>
        <member name="T:ZWaveLib.ZWaveNode">
            <summary>
            Z-wave node object.
            </summary>
        </member>
        <member name="P:ZWaveLib.ZWaveNode.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveNode.NodeInformationFrame">
            <summary>
            Gets or sets the node information frame.
            </summary>
            <value>The node information frame.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveNode.SecuredNodeInformationFrame">
            <summary>
            Gets or sets the secured node information frame.
            </summary>
            <value>The secured node information frame.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveNode.ManufacturerSpecific">
            <summary>
            Gets or sets the manufacturer specific.
            </summary>
            <value>The manufacturer specific.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveNode.Data">
            <summary>
            Gets or sets the data.
            </summary>
            <value>The data.</value>
        </member>
        <member name="T:ZWaveLib.ZWaveNode.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveNode.NodeUpdated">
            <summary>
            Occurs when node is updated.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode"/> class.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode"/> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.#ctor(ZWaveLib.ZWaveController,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveNode"/> class.
            </summary>
            <param name="controller">Controller.</param>
            <param name="nodeId">Node identifier.</param>
            <param name="genericType">Generic type.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.GetCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Gets the command class.
            </summary>
            <returns>The command class.</returns>
            <param name="cclass">Cclass.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.SupportCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Supports the command class.
            </summary>
            <returns><c>true</c>, if command class is supported, <c>false</c> otherwise.</returns>
            <param name="commandClass">Command Class</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.IsSecuredCommandClass(ZWaveLib.CommandClass)">
            <summary>
            Determines whether this instance command class specified by c is secured.
            </summary>
            <returns><c>true</c> true if is secured command class; otherwise, <c>false</c>.</returns>
            <param name="commandClass">Command Class.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.GetData(System.String,System.Object)">
            <summary>
            Gets the custom node data.
            </summary>
            <returns>The data.</returns>
            <param name="fieldId">Field identifier.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.UpdateData(System.String,System.Object)">
            <summary>
            Updates the custom node data.
            </summary>
            <param name="fieldId">Field identifier.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveNode.SendDataRequest(System.Byte[])">
            <summary>
            Sends the data request.
            </summary>
            <param name="request">Request.</param>
        </member>
        <member name="F:ZWaveLib.Command.SensorMultilevelReport">
            <summary>
            0x05
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiInstanceSet">
            <summary>
            0x01
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiInstanceGet">
            <summary>
            0x02
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountGet">
            <summary>
            0x04
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiInstanceCountReport">
            <summary>
            0x05
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiInstanceEncapsulated">
            <summary>
            0x06
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiChannelCapabilityReportV2">
            <summary>
            0x0A
            </summary>
        </member>
        <member name="F:ZWaveLib.Command.MultiChannelEncapsulated">
            <summary>
            0x0D
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController">
            <summary>
            Z-Wave Controller.
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController.ControllerStatusChangedEventHandler">
            <summary>
            Controller status changed event handler.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveController.ControllerStatusChanged">
            <summary>
            Occurs when controller status changed.
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController.DiscoveryProgressEventHandler">
            <summary>
            Discovery progress event handler.
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController.HealProgressEventHandler">
            <summary>
            Heal progress event handler.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveController.DiscoveryProgress">
            <summary>
            Occurs during discovery process.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveController.HealProgress">
            <summary>
            Occurs during heal process.
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController.NodeOperationProgressEventHandler">
            <summary>
            Node operation progress event handler.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveController.NodeOperationProgress">
            <summary>
            Occurs when a node operation is taking place.
            </summary>
        </member>
        <member name="T:ZWaveLib.ZWaveController.NodeUpdatedEventHandler">
            <summary>
            Node updated event handler.
            </summary>
        </member>
        <member name="E:ZWaveLib.ZWaveController.NodeUpdated">
            <summary>
            Occurs when node data is updated.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController"/> class.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ZWaveLib.ZWaveController"/> class.
            </summary>
            <param name="portName">The serial port name.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.Connect">
            <summary>
            Connect this instance.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.Disconnect">
            <summary>
            Disconnect this instance.
            </summary>
        </member>
        <member name="P:ZWaveLib.ZWaveController.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
            <value>The name of the port.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveController.CommandDelay">
            <summary>
            Gets or sets the amount of command delay.
            </summary>
            <value>The length of the delay in ms.</value>
        </member>
        <member name="P:ZWaveLib.ZWaveController.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="M:ZWaveLib.ZWaveController.QueueMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Queues the message.
            </summary>
            <returns>The ZWaveMessage object itself.</returns>
            <param name="message">Message.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.SendMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Sends the message without waiting other pending requests to complete.
            </summary>
            <returns>True if sending succesfull, False otherwise.</returns>
            <param name="message">Message.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.SoftReset">
            <summary>
            SoftReset the controller.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.HardReset">
            <summary>
            HardReset the controller.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.Initialize">
            <summary>
            Initialize the controller (get the node list).
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetControllerInfo">
            <summary>
            Gets the controller info.
            </summary>
            <returns><c>true</c>, if controller info was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetControllerCapabilities">
            <summary>
            Gets the controller capabilities.
            </summary>
            <returns><c>true</c>, if controller capabilities was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetHomeId">
            <summary>
            Gets the home identifier.
            </summary>
            <returns><c>true</c>, if home identifier was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetSucNodeId">
            <summary>
            Gets the suc node identifier.
            </summary>
            <returns><c>true</c>, if suc node identifier was gotten, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.Discovery">
            <summary>
            Query capabilities, Supported Classes and Manufacturer Specific of each node.
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.HealNetwork">
            <summary>
            Iterate through the nodes and performa a heal on each one
            </summary>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeInformationFrame(System.Byte)">
            <summary>
            Gets the node information frame.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetNodeProtocolInfo(System.Byte)">
            <summary>
            Gets the node protocol info.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetNode(System.Byte)">
            <summary>
            Gets the node.
            </summary>
            <returns>The node.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="P:ZWaveLib.ZWaveController.Nodes">
            <summary>
            Gets the nodes.
            </summary>
            <value>The nodes.</value>
        </member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeAdd">
            <summary>
            Begins the node add.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node add.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeAdd">
            <summary>
            Stops the node add.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node add.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.BeginNodeRemove">
            <summary>
            Begins the node remove.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node remove.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.StopNodeRemove">
            <summary>
            Stops the node remove.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <returns>The node remove.</returns>
        </member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdateOptions(System.Byte)">
            <summary>
            Requests the neighbors options update.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.RequestNeighborsUpdate(System.Byte)">
            <summary>
            Requests the neighbors update.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.GetNeighborsRoutingInfo(System.Byte)">
            <summary>
            Gets the neighbors routing info.
            </summary>
            <returns>The ZWaveMessage object of this request.</returns>
            <param name="nodeId">Node identifier.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.SetQueryStage(ZWaveLib.QueryStage)">
            <summary>
            Sets the query stage.
            </summary>
            <param name="stage">Stage.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.UpdateQueryStage(ZWaveLib.ZWaveMessage)">
            <summary>
            Updates the query stage.
            </summary>
            <param name="zm">Zm.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.ProcessMessage(ZWaveLib.ZWaveMessage)">
            <summary>
            Processes a ZWave message.
            </summary>
            <param name="zm">Zm.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.ParseSerialData(System.Byte[])">
            <summary>
            Parses the data buffer coming from the serial port.
            </summary>
            <param name="message">raw bytes data.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeUpdated(ZWaveLib.NodeUpdatedEventArgs)">
            <summary>
            Raises the node updated event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.OnDiscoveryProgress(ZWaveLib.DiscoveryProgressEventArgs)">
            <summary>
            Raises the discovery progress event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.OnHealProgress(ZWaveLib.HealProgressEventArgs)">
            <summary>
            Raises the heal progress event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.OnNodeOperationProgress(ZWaveLib.NodeOperationProgressEventArgs)">
            <summary>
            Raises the node operation progress event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="M:ZWaveLib.ZWaveController.OnControllerStatusChanged(ZWaveLib.ControllerStatusEventArgs)">
            <summary>
            Raises the controller status changed event.
            </summary>
            <param name="args">Arguments.</param>
        </member>
        <member name="P:ZWaveLib.ScheduleStateValue.Setback">
            <summary>
            The setback in 1/10 degrees (Kelvin)
            </summary>
            <remarks>
                Example:
                    0 = 0 degrees setback
                    1 = 0.1 degrees is added to the setpoint
                    2 = 0.2 degrees is added to the setpoint
                    -1 = 0.1 degrees is subtracted from the setpoint
                    -2 = 0.2 degrees is subtracted from the setpoint
            
                Null When the schedule state indicates FrostProtection, EntergySavingMode or is Unused.
            </remarks>
            <value>The setback.</value>
        </member>
    </members>
</doc>
